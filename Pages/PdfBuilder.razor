@page "/pdfBuilder"
@using PdfApp.Shared.Components
@using PdfApp.Shared.Enums
@using PdfApp.Shared.Models

<div class="page-container">
    <MudGrid Spacing="2" Style="flex-grow: 1">
        <MudItem Class="take-all-height" xs="8">
            <MudPaper Outlined Elevation="25">
                <MudToolBar>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@OnGenerateClick">Generate</MudButton>
                </MudToolBar>
            </MudPaper>
            <MudStack Row Spacing="2" Class="d-flex flex-grow-1" Style="height: 100%">
                <MudItem xs="4">
                    @BuildTemplatesView()
                </MudItem>
                <MudItem xs="8">
                    @BuildBuilderView()
                </MudItem>
            </MudStack>
        </MudItem>

        <MudItem Class="take-all-height" xs="4">
            <MudPaper Style="display: flex; flex-grow: 1; height: 100%;">
                <h1>PREVIEW</h1>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@* ReSharper disable UnusedParameter.Local *@
@* ReSharper disable InconsistentNaming *@
@code {

    private RenderFragment BuildTemplatesView() => __builder =>
    {
        <MudPaper Class="d-flex flex-grow-1" Style="height: 100%">
            
            
            <MudStack Spacing="4" Style="padding: 1em; width: 100%">
                <PdfBlockCard Data=@(new BlockElementData("Header", "Header element", ElementType.Header)) OnClickEventHandler="OnTemplateBlockClick"/>
                <PdfBlockCard Data=@(new BlockElementData("Normal", "Regular content element", ElementType.Regular)) OnClickEventHandler="OnTemplateBlockClick"/>
                <PdfBlockCard Data=@(new BlockElementData("Footer", "Footer element", ElementType.Footer)) OnClickEventHandler="OnTemplateBlockClick"/>
            </MudStack>
        </MudPaper>
    };
    
    private RenderFragment BuildBuilderView() => __builder =>
    {
        <MudDropContainer @ref="@_dropContainerRef" T="DropItem" Items="_dropzoneItems" 
                          ItemsSelector="@((item, dropzone) => item.DropZoneIdentifier == dropzone)"
                          ItemIsDisabled="@(item => item.Type != ElementType.Regular)"
                          ItemDropped="@ItemUpdated"
                          Class="d-flex flex-wrap flex-grow-1" Style="height: 100%">
            <ChildContent>
                <MudDropZone T="DropItem" Identifier="@AREA_NAME_BUILDER" AllowReorder Style="background-color: red; flex-grow: 1; height: 100%">
                </MudDropZone>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 mb-4">@context.Name GUID: @context.Guid</MudPaper>
            </ItemRenderer>

        </MudDropContainer>
    };

}
@* ReSharper restore UnusedParameter.Local *@
@* ReSharper restore InconsistentNaming *@